/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from './common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base'

/**
 *
 * @export
 * @interface GetMeResponseDto
 */
export interface GetMeResponseDto {
  /**
   *
   * @type {number}
   * @memberof GetMeResponseDto
   */
  userId: number
  /**
   *
   * @type {boolean}
   * @memberof GetMeResponseDto
   */
  isLoggedIn: boolean
}
/**
 *
 * @export
 * @interface GetUserResponseDto
 */
export interface GetUserResponseDto {
  /**
   *
   * @type {number}
   * @memberof GetUserResponseDto
   */
  userId: number
  /**
   *
   * @type {string}
   * @memberof GetUserResponseDto
   */
  username: string
  /**
   *
   * @type {string}
   * @memberof GetUserResponseDto
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof GetUserResponseDto
   */
  createdAt: string
  /**
   *
   * @type {string}
   * @memberof GetUserResponseDto
   */
  updatedAt: string
  /**
   *
   * @type {Set<RoleBaseDto>}
   * @memberof GetUserResponseDto
   */
  roles?: Set<RoleBaseDto>
}
/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
  /**
   *
   * @type {string}
   * @memberof InlineObject
   */
  username?: string
  /**
   *
   * @type {string}
   * @memberof InlineObject
   */
  password?: string
}
/**
 *
 * @export
 * @interface RoleBaseDto
 */
export interface RoleBaseDto {
  /**
   *
   * @type {number}
   * @memberof RoleBaseDto
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof RoleBaseDto
   */
  roleName?: string
  /**
   *
   * @type {string}
   * @memberof RoleBaseDto
   */
  description?: string
}
/**
 *
 * @export
 * @interface SignupRequestDto
 */
export interface SignupRequestDto {
  /**
   *
   * @type {string}
   * @memberof SignupRequestDto
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof SignupRequestDto
   */
  username: string
  /**
   *
   * @type {string}
   * @memberof SignupRequestDto
   */
  password: string
}

/**
 * IndexControllerApi - axios parameter creator
 * @export
 */
export const IndexControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {SignupRequestDto} signupRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp: async (signupRequestDto: SignupRequestDto, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'signupRequestDto' is not null or undefined
      assertParamExists('signUp', 'signupRequestDto', signupRequestDto)
      const localVarPath = `/signup`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(signupRequestDto, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * IndexControllerApi - functional programming interface
 * @export
 */
export const IndexControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = IndexControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {SignupRequestDto} signupRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signUp(
      signupRequestDto: SignupRequestDto,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(signupRequestDto, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    }
  }
}

/**
 * IndexControllerApi - factory interface
 * @export
 */
export const IndexControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = IndexControllerApiFp(configuration)
  return {
    /**
     *
     * @param {SignupRequestDto} signupRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp(signupRequestDto: SignupRequestDto, options?: any): AxiosPromise<string> {
      return localVarFp.signUp(signupRequestDto, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * IndexControllerApi - object-oriented interface
 * @export
 * @class IndexControllerApi
 * @extends {BaseAPI}
 */
export class IndexControllerApi extends BaseAPI {
  /**
   *
   * @param {SignupRequestDto} signupRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof IndexControllerApi
   */
  public signUp(signupRequestDto: SignupRequestDto, options?: any) {
    return IndexControllerApiFp(this.configuration)
      .signUp(signupRequestDto, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * LoginEndpointApi - axios parameter creator
 * @export
 */
export const LoginEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginPost: async (inlineObject?: InlineObject, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/login`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'loginRequestBody'

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * LoginEndpointApi - functional programming interface
 * @export
 */
export const LoginEndpointApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LoginEndpointApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginPost(
      inlineObject?: InlineObject,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(inlineObject, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    }
  }
}

/**
 * LoginEndpointApi - factory interface
 * @export
 */
export const LoginEndpointApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = LoginEndpointApiFp(configuration)
  return {
    /**
     *
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginPost(inlineObject?: InlineObject, options?: any): AxiosPromise<void> {
      return localVarFp.loginPost(inlineObject, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * LoginEndpointApi - object-oriented interface
 * @export
 * @class LoginEndpointApi
 * @extends {BaseAPI}
 */
export class LoginEndpointApi extends BaseAPI {
  /**
   *
   * @param {InlineObject} [inlineObject]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LoginEndpointApi
   */
  public loginPost(inlineObject?: InlineObject, options?: any) {
    return LoginEndpointApiFp(this.configuration)
      .loginPost(inlineObject, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/user/me`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (userId: number, options: any = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('getUser', 'userId', userId)
      const localVarPath = `/api/v1/user/{userId}`.replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/user`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMeResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      userId: number,
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponseDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsers(
      options?: any
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetUserResponseDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    }
  }
}

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserControllerApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): AxiosPromise<GetMeResponseDto> {
      return localVarFp.getMe(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userId: number, options?: any): AxiosPromise<GetUserResponseDto> {
      return localVarFp.getUser(userId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: any): AxiosPromise<Array<GetUserResponseDto>> {
      return localVarFp.getUsers(options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public getMe(options?: any) {
    return UserControllerApiFp(this.configuration)
      .getMe(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {number} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public getUser(userId: number, options?: any) {
    return UserControllerApiFp(this.configuration)
      .getUser(userId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserControllerApi
   */
  public getUsers(options?: any) {
    return UserControllerApiFp(this.configuration)
      .getUsers(options)
      .then((request) => request(this.axios, this.basePath))
  }
}
